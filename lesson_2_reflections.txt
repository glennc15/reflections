What happens when you initialize a repository? Why do you need to do it?
	
	git init: Initializes a git reposiotry by setting up a hidden .git
	directory but does not add any files or commits.

	Need to do this so you can begin using git for version control.

How is the staging area different from the working directory and the repository? 

	Staging area is an area to prepare files to be committed.

	git add [filename1] [filename2] [filenameX] ...: adds files to the Staging area.

	git reset [filename1] [filename2] [filenameX] ...: remove files from the Staging area.

What value do you think it offers?

	The Staging area allows you to review all changes before they are committed.

How can you use the staging area to make sure you have one commit per logical change?
	
	You can verify the staging area contains all correct file changes before commiting.






Git commands:

	git init: Initializes a git reposiotry by setting up a hidden .git
		directory but does not add any files or commits.

	git add [filename1] [filename2] [filenameX] ...: adds files to the Staging
		area.

	git reset [filename1] [filename2] [filenameX] ...: remove files from the
		Staging area.

	git status: shows files in the Staging Area and the Working Directory.

	git commit: moves files from the Staging Area to the repository.

	git diff: changes between files in the working directory and the staging
		area.

	git diff --staged: compare changes between files in the staging area and
		the latest commit in the repository.

	git diff id1 id2: compare changes between 2 repository commits.

	git checkout master: moves to the most recent commit in the repository.

	git branch: shows all repository branches.

	git branch [branch name]: creates a branch in the repository.

	git branch -d [branch name]: deletes a branch name in the repository.

	git checkout [branch name]: switch to [branch name] in the repository.

	git checkout -b [new branch name]: creates a new branch and checkout the new 
		branch.


	git show [repository id]: shows the difference between this file and it's
		parent.

	git log --graph --oneline [branch1 name] [branch2 name]

	git remote: show all remotes.